// api/vendor-profile.js
export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'GET') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  const { token } = req.query;
  
  if (!token) {
    res.status(400).json({ error: 'Token is required' });
    return;
  }

  // Use the new vendor portal OAuth token
  const accessToken = process.env.NOTION_VENDOR_TOKEN;
  const headers = {
    'Authorization': `Bearer ${accessToken}`,
    'Content-Type': 'application/json',
    'Notion-Version': '2022-06-28'
  };

  try {
    console.log(`Loading vendor profile for token: ${token}`);
    
    // Step 1: Validate token and get booth/organization info from Zapier Tables
    // For now, we'll simulate this lookup - you'll replace with actual Zapier Tables API call
    const tokenData = await validateToken(token);
    if (!tokenData) {
      res.status(404).json({ error: 'Invalid or expired token' });
      return;
    }

    console.log('Token validated, loading vendor data...');

    // Step 2: Get booth sales data
    const boothResponse = await fetch(`https://api.notion.com/v1/databases/209a69bf0cfd80018854e7070284f3c5/query`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        filter: {
          property: "Booth Number",
          title: {
            equals: tokenData.boothNumber
          }
        }
      })
    });

    if (!boothResponse.ok) {
      throw new Error(`Booth lookup failed: ${boothResponse.status}`);
    }

    const boothData = await boothResponse.json();
    if (boothData.results.length === 0) {
      res.status(404).json({ error: 'Booth not found' });
      return;
    }

    const booth = boothData.results[0];
    console.log(`Found booth ${tokenData.boothNumber}`);

    // Step 3: Get organization data (if exists)
    let organizationData = null;
    const contactId = booth.properties['Contact Verified']?.relation?.[0]?.id;
    
    if (contactId) {
      console.log('Loading organization data...');
      
      // Get contact to find organization
      const contactResponse = await fetch(`https://api.notion.com/v1/pages/${contactId}`, {
        headers
      });

      if (contactResponse.ok) {
        const contact = await contactResponse.json();
        const orgId = contact.properties['Organization']?.relation?.[0]?.id;

        if (orgId) {
          // Get organization details
          const orgResponse = await fetch(`https://api.notion.com/v1/pages/${orgId}`, {
            headers
          });

          if (orgResponse.ok) {
            organizationData = await orgResponse.json();
          }
        }
      }
    }

    // Step 4: Get all contacts for this organization
    let contacts = [];
    if (organizationData) {
      console.log('Loading contact list...');
      
      const contactsResponse = await fetch(`https://api.notion.com/v1/databases/1f9a69bf0cfd802f9aedd32a6ceff02f/query`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          filter: {
            property: "Organization",
            relation: {
              contains: organizationData.id
            }
          }
        })
      });

      if (contactsResponse.ok) {
        const contactsData = await contactsResponse.json();
        contacts = contactsData.results;
      }
    }

    // Step 5: Format response data
    const response = {
      token: token,
      boothNumber: tokenData.boothNumber,
      booth: {
        id: booth.id,
        status: booth.properties['Status']?.status?.name || 'available',
        price: booth.properties['Price']?.number || null
      },
      organization: organizationData ? {
        id: organizationData.id,
        name: organizationData.properties['Organization']?.title?.[0]?.plain_text || '',
        website: organizationData.properties['Website']?.url || '',
        primaryCategory: organizationData.properties['Primary Category']?.select?.name || '',
        description: organizationData.properties['Description']?.rich_text?.[0]?.plain_text || '',
        highlightProduct: {
          name: organizationData.properties['Highlight Product Name']?.rich_text?.[0]?.plain_text || '',
          description: organizationData.properties['Highlight Product Description']?.rich_text?.[0]?.plain_text || ''
        }
      } : null,
      contacts: contacts.map(contact => ({
        id: contact.id,
        name: contact.properties['Name']?.title?.[0]?.plain_text || '',
        title: contact.properties['Title']?.rich_text?.[0]?.plain_text || '',
        email: contact.properties['Email']?.email || '',
        circle: contact.properties['Circle Username']?.rich_text?.[0]?.plain_text || ''
      }))
    };

    console.log(`Successfully loaded profile for booth ${tokenData.boothNumber}`);
    res.status(200).json(response);
    
  } catch (error) {
    console.error('Error loading vendor profile:', error);
    res.status(500).json({ 
      error: 'Failed to load vendor profile', 
      details: error.message 
    });
  }
}

// Temporary token validation - replace with actual Zapier Tables lookup
async function validateToken(token) {
  // For demo purposes, we'll simulate some tokens
  const mockTokens = {
    'ABC123': { boothNumber: '501', email: 'mel@login.ca', orgId: 'some-org-id' },
    'XYZ789': { boothNumber: '201', email: 'contact@vitalsource.com', orgId: 'another-org-id' },
    'DEF456': { boothNumber: '100', email: 'info@sharper.com', orgId: 'third-org-id' }
  };

  return mockTokens[token] || null;
}
